* TABLE OF CONTENTS :toc:
- [[#download-elpaca][Download Elpaca]]
- [[#use-package-support][Use Package Support]]
- [[#which-key][WHICH KEY]]
- [[#fonts-and-layout][Fonts and Layout]]
  - [[#disable-bar-and-enable-line-numbers][Disable bar and enable line numbers]]
  - [[#fonts][Fonts]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-tempo][Org tempo]]
- [[#sudo-edit][SUDO EDIT]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#buffer-move][Buffer Move]]
- [[#buffer-move-key-bindings][Buffer Move key Bindings]]

* Download Elpaca
#+begin_src emacs-lisp

(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/"  user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

#+end_src

* Use Package Support
#+begin_src emacs-lisp
      (elpaca elpaca-use-package
        ;; Enable use-package :ensure support for Elpaca.
        (elpaca-use-package-mode))
 #+end_src

* WHICH KEY
 #+begin_src emacs-lisp
   (use-package which-key  :ensure t :demand t
   :init
     (which-key-mode 1)
   :config
   (setq which-key-side-window-location 'bottom
         which-key-sort-order #'which-key-key-order-alpha
         which-key-sort-uppercase-first nil
         which-key-add-column-padding 1
         which-key-max-display-columns nil
         which-key-min-display-lines 6
         which-key-side-window-slot -10
         which-key-side-window-max-height 0.25
         which-key-idle-delay 0.8
         which-key-max-description-length 25
         which-key-allow-imprecise-window-fit t
         which-key-separator " â†’ " ))
   #+end_src

* Fonts and Layout
** Disable bar and enable line numbers
   #+begin_src emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)

     ;line numbers
     (global-display-line-numbers-mode 1)
     (global-visual-line-mode t)
#+end_src

** Fonts
#+begin_src emacs-lisp
     ;fonts
     (set-face-attribute 'default nil
     :font "JetBrains Mono"
     :height 110
     :weight 'medium)
   (set-face-attribute 'variable-pitch nil
     :font "Ubuntu"
     :height 120
     :weight 'medium)
   (set-face-attribute 'fixed-pitch nil
     :font "JetBrains Mono"
     :height 110
     :weight 'medium)
   ;; Makes commented text and keywords italics.
   ;; This is working in emacsclient but not emacs.
   ;; Your font must have an italic face available.
   (set-face-attribute 'font-lock-comment-face nil
     :slant 'italic)
   (set-face-attribute 'font-lock-keyword-face nil
     :slant 'italic)

   ;; This sets the default font on all graphical frames created after restarting Emacs.
   ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
   ;; are not right unless I also add this method of setting the default font.
   (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

   (setq-default line-spacing 0.12)

#+end_src


* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org :ensure t :demand t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
 (use-package org-bullets :ensure t :demand t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode -1) 
#+end_src

** Org tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit :ensure t :demand t)
#+end_src

* IVY (COUNSEL)
#+begin_src emacs-lisp
(use-package counsel :ensure t :demand t
  :after ivy
  :config (counsel-mode))

(use-package ivy :ensure t :demand t
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t :demand t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich 
  :after ivy
  :ensure t :demand t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

* ALL THE ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t 
     :if (display-graphic-p))

  (use-package all-the-icons-dired
     :ensure t
     :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src


* Buffer Move 
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src


* Buffer Move key Bindings
#+begin_src emacs-lisp
(global-set-key  (kbd "C-c l") 'buf-move-left)
(global-set-key  (kbd "C-c u") 'buf-move-up)
(global-set-key  (kbd "C-c r") 'buf-move-right)
(global-set-key  (kbd "C-c d") 'buf-move-down)
#+end_src
